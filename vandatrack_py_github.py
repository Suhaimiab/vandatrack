# -*- coding: utf-8 -*-
"""vandatrack.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H5KzNtwCiCMLNA8PqIooTn83OuDaXzEx
"""

import streamlit as st
import pandas as pd
import requests
import json
import plotly.express as px
from datetime import date, timedelta
from alpha_vantage.timeseries import TimeSeries
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# --- Main UI Configuration ---
st.set_page_config(page_title="VandaTrack Data Downloader", layout="wide")
st.title("ðŸ“Š VandaTrack Data Downloader")

# --- Read API Keys from Streamlit's Secret Management ---
# On the server, these will be read from the app's secret settings.
# For local testing, you can create a file: .streamlit/secrets.toml
VANDATRACK_TOKEN = st.secrets.get("VANDATRACK_TOKEN")
ALPHA_VANTAGE_KEY = st.secrets.get("ALPHA_VANTAGE_KEY")

# --- Sidebar for User Inputs ---
with st.sidebar:
    st.header("Query Parameters")
    tickers_input = st.text_area("Enter Tickers (comma-separated)", 'AAPL,AMD,AMZN,META,GOOG,MSFT,NFLX,NVDA,TSLA')

    default_to_date = date.today()
    default_from_date = default_to_date - timedelta(days=90)
    from_date = st.date_input("From Date", default_from_date)
    to_date = st.date_input("To Date", default_to_date)
    data_type = st.selectbox("Transaction Type", ('all', 'buy', 'sell'))

# --- Check for API Keys before proceeding ---
if not VANDATRACK_TOKEN or not ALPHA_VANTAGE_KEY:
    st.error("API Keys are not configured. Please ask the app owner to set them in the deployment settings.")
elif not tickers_input:
    st.info("Please enter at least one ticker in the sidebar to begin.")
else:
    # --- The rest of the application logic remains the same ---
    # 1. Fetch and Process VandaTrack Data
    vandatrack_df = None
    with st.spinner("Fetching VandaTrack data..."):
        try:
            url = 'https://www.vandatrack.com/tickers/api/'
            ticker_list = [ticker.strip().upper() for ticker in tickers_input.split(',')]
            params = {
                'auth_token': VANDATRACK_TOKEN,
                'tickers': ticker_list,
                'from_date': from_date.strftime('%Y-%m-%d'),
                'to_date': to_date.strftime('%Y-%m-%d'),
            }
            if data_type != 'all':
                params['type'] = data_type

            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()

            df_wide = pd.DataFrame.from_dict(data, orient='index').T
            df_reset = df_wide.reset_index().rename(columns={'index': 'date'})
            df_long = pd.melt(df_reset, id_vars=['date'], var_name='ticker', value_name='net_flow')
            df_long['date'] = pd.to_datetime(df_long['date'])
            df_long['net_flow'] = pd.to_numeric(df_long['net_flow'], errors='coerce').fillna(0)
            df_long = df_long.sort_values(by=['ticker', 'date'])

            window = 21
            rolling_mean = df_long.groupby('ticker')['net_flow'].transform(lambda x: x.rolling(window, min_periods=1).mean())
            rolling_std = df_long.groupby('ticker')['net_flow'].transform(lambda x: x.rolling(window, min_periods=1).std())
            df_long['z_score'] = (df_long['net_flow'] - rolling_mean) / rolling_std
            df_long['z_score'] = df_long['z_score'].fillna(0).replace([float('inf'), float('-inf')], 0)

            vandatrack_df = df_long
            st.success("VandaTrack data processed successfully!")
        except Exception as e:
            st.error(f"An error occurred while fetching VandaTrack data: {e}")

    # 2. Proceed only if VandaTrack data is available
    if vandatrack_df is not None and not vandatrack_df.empty:
        st.markdown("---")
        st.subheader("ðŸ“ˆ General Trend Comparison")
        available_metrics = ['net_flow', 'z_score']
        metric_to_plot = st.selectbox("Select a metric to visualize across all tickers:", available_metrics)
        fig_multi = px.line(vandatrack_df, x='date', y=metric_to_plot, color='ticker', title=f"{metric_to_plot.replace('_', ' ').title()} Over Time")
        st.plotly_chart(fig_multi, use_container_width=True)

        # --- Single Stock Analysis Section ---
        st.markdown("---")
        st.subheader("ðŸ”¬ Single Stock Analysis")

        tickers_list = vandatrack_df['ticker'].unique()
        single_stock = st.selectbox("Select a ticker for detailed analysis:", tickers_list)

        if single_stock:
            single_stock_df = vandatrack_df[vandatrack_df['ticker'] == single_stock].copy()

            price_df = None
            with st.spinner(f"Fetching price data for {single_stock} from Alpha Vantage..."):
                try:
                    ts = TimeSeries(key=ALPHA_VANTAGE_KEY, output_format='pandas')
                    data, meta_data = ts.get_daily(symbol=single_stock, outputsize='full')

                    data.rename(columns={'4. close': 'price'}, inplace=True)
                    price_df = data[['price']].reset_index()
                    price_df.rename(columns={'date': 'date_col'}, inplace=True)
                    price_df['date'] = pd.to_datetime(price_df['date_col'])

                except Exception as e:
                    st.error(f"Alpha Vantage failed to download data. Error: {e}")

            if price_df is not None:
                single_stock_df['date'] = single_stock_df['date'].dt.tz_localize(None)
                price_df['date'] = price_df['date'].dt.tz_localize(None)

                merged_df = pd.merge(single_stock_df, price_df, on='date', how='inner')

                if merged_df.empty:
                    st.warning("No overlapping dates found.")
                else:
                    merged_df['price'] = pd.to_numeric(merged_df['price'], errors='coerce')
                    merged_df.dropna(subset=['price'], inplace=True)

                    if not merged_df.empty:
                        price_min = merged_df['price'].min() * 0.95
                        price_max = merged_df['price'].max() * 1.05
                        price_range = [price_min, price_max]

                        st.markdown(f"#### Net Flow vs. Stock Price for {single_stock}")
                        fig1 = make_subplots(specs=[[{"secondary_y": True}]])
                        fig1.add_trace(go.Bar(x=merged_df['date'], y=merged_df['net_flow'], name='Net Flow', marker_color='rgba(173, 216, 230, 0.6)'), secondary_y=False)
                        fig1.add_trace(go.Scatter(x=merged_df['date'], y=merged_df['price'], name='Stock Price', mode='lines', line=dict(color='purple')), secondary_y=True)
                        fig1.update_layout(title_text=f"Net Flow and Price for {single_stock}")
                        fig1.update_yaxes(title_text="Net Flow", secondary_y=False)
                        fig1.update_yaxes(title_text="Stock Price (USD)", secondary_y=True, range=price_range)
                        st.plotly_chart(fig1, use_container_width=True)

                        st.markdown(f"#### Z-Score vs. Stock Price for {single_stock}")
                        fig2 = make_subplots(specs=[[{"secondary_y": True}]])
                        fig2.add_trace(go.Scatter(x=merged_df['date'], y=merged_df['z_score'], name='Z-Score', mode='lines', line=dict(color='orange')), secondary_y=False)
                        fig2.add_trace(go.Scatter(x=merged_df['date'], y=merged_df['price'], name='Stock Price', mode='lines', line=dict(color='purple')), secondary_y=True)
                        fig2.update_layout(title_text=f"Z-Score and Price for {single_stock}")
                        fig2.update_yaxes(title_text="Z-Score (Standard Deviations)", secondary_y=False)
                        fig2.update_yaxes(title_text="Stock Price (USD)", secondary_y=True, range=price_range)
                        st.plotly_chart(fig2, use_container_width=True)
    with st.expander("Show Processed VandaTrack Data"):
        if vandatrack_df is not None:
            st.dataframe(vandatrack_df)